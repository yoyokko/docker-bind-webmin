name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # 默认为 Docker Hub，如果使用其他 Docker 注册表，可以修改
      REGISTRY: 'docker.io'
      # 使用 GitHub 仓库名作为镜像名称，格式为 < 账户>/< 仓库>
      IMAGE_NAME: edwardchen/bindwebmin

    steps:
    - uses: actions/checkout@v4
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag edwardchen/bindwebmin:$(date +%s)
      # 登录到 Docker Hub（或其他 Docker 注册表）
    - name: Log in to Docker Hub
      # 仅在非 PR 事件中执行登录
      if: github.event_name != 'pull_request'
      # 使用 Docker 登录动作
      uses: docker/login-action@v2
      with:
        # 使用自定义的注册表（默认为 Docker Hub）
        registry: ${{ env.REGISTRY }}
        # 从 GitHub Secrets 获取 Docker 用户名
        username: ${{ secrets.DOCKER_USERNAME }}
        # 从 GitHub Secrets 获取 Docker 密码
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 提取 Docker 元数据（标签和标签）
    - name: Extract Docker metadata
      id: meta
      # 使用 Docker metadata-action 提取元数据
      uses: docker/metadata-action@v4
      with:
        # 使用定义的镜像名称
        images: ${{ env.IMAGE_NAME }}
        tags: |
          # 设置最新标签
          type=raw,value=latest,enable={{is_default_branch}}
          # 设置基于标签的标签
          type=ref,enable=true,priority=600,prefix=,suffix=,event=tag

    # 构建并推送 Docker 镜像
    - name: Build and push Docker image
      # 使用 Docker build-push-action 来构建和推送镜像
      uses: docker/build-push-action@v3
      with:
        # Docker 构建上下文为当前目录
        context: .
        # Dockerfile 路径
        file: ./docker-bind-webmin/src/main/Dockerfile
        # 如果不是 PR，推送镜像
        push: ${{ github.event_name != 'pull_request' }}
        # 使用提取的标签推送镜像
        tags: ${{ steps.meta.outputs.tags }}
        # 使用提取的标签作为镜像元数据
        labels: ${{ steps.meta.outputs.labels }}
